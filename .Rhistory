#  use the average of the predicted values to compute ICC
mn_y_lgt_pred <- mean(y_lgt_pred)
pi_ <- plogis(mn_y_lgt_pred)
v_2 <- tau2 * pi_ ^ 2 / (1 + exp(mn_y_lgt_pred)) ^ 2
return(v_2 / (v_2 + pi_ - pi_ ^ 2))
}
# otherwise, compute a unique ICC for each unique value in `y_lgt_pred`
y_lgt_pred_un <- unique(y_lgt_pred)
sapply(y_lgt_pred_un, function(y_pred) {
mn_y_lgt_pred <- y_pred
pi_ <- plogis(mn_y_lgt_pred)
v_2 <- tau2 * pi_ ^ 2 / (1 + exp(mn_y_lgt_pred)) ^ 2
v_2 / (v_2 + pi_ - pi_ ^ 2)
})
}
MOR <- function(fit, gr) {
#' Computes Merlo's et al. (2006) Median Odds Ratio
#'
#' @param fit A fit glmer model
#' @param gr  A string of the group identifier (e.g., "PID")
#'
#' @return A singular MOR value
#'
#' @examples MOR(model, 'PID')
tau2  <- lme4::VarCorr(fit)[[gr]][1]
exp(sqrt(2*tau2)*qnorm(.75))
}
bootstrap_icc <- function(fit, gr, method, B=5e3, seed=1234) {
#' Computes bootstrapped values for methods used above
#'
#' @param fit A fit glmer model
#' @param gr A string of the group identifier (e.g., "PID")
#' @param method A string of the method to compute (e.g., "icc_lin")
#' @param B  The number of bootstrapped samples
#' @param seed Random seed value for reproducibility
#'
#' @return A vector (1xB) of bootstrapped estimates
#'
#' @examples bootstrap_icc(model,"PID","icc_lin",B=1e3,seed=2022)
sims <- simulate(fit, B, seed)
pb <- txtProgressBar(0,B)
out <- rep(NA, B)
for(i in 1:B) {
setTxtProgressBar(pb,i)
mod <- lme4::refit(fit, newresp = sims[[i]])
out[i] <- eval(parse(text=paste0(method,'(mod,"',gr,'")')))
}
out
}
# Compute ICC for each gender
icc_sim(logistic_MLM2a, 'PID',seed=2023) # 0.1311799
# Compute ICC for each gender
icc_sim(logistic_MLM2a, 'PID', avg_preds = F, seed=2023) # 0.1311799
# Compute ICC for each gender
icc_sim(logistic_MLM2a, 'PID', avg_preds = F, seed=2023) # 0.1311799
# Fit model
logistic_MLM2 <- glmer(effort_choice ~ condition + (1|PID),
data=data, family='binomial')
summary(logistic_MLM2a)
# Fit model
logistic_MLM2 <- glmer(effort_choice ~ condition + (1|PID),
data=data, family='binomial')
summary(logistic_MLM2)
# Compute ICC for each gender
icc_sim(logistic_MLM2, 'PID', avg_preds = F, seed=2023) # 0.1311799
icc_lin(logistic_MLM2a, 'PID', avg_preds = F) # 0.1489162
# Compute ICC for each gender
icc_thr(logistic_MLM2, 'PID')
# Compute ICC for each gender
icc_thr(logistic_MLM2, 'PID')
icc_sim(logistic_MLM2, 'PID', avg_preds = F, seed=2023) # 0.1127125 0.1106655
icc_lin(logistic_MLM2a, 'PID', avg_preds = F) # 0.1423719 0.1522935
MOR(logistic_MLM2a, 'PID') # 2.246703
icc_lin(logistic_MLM2, 'PID', avg_preds = F) # 0.1423719 0.1522935
# Compute ICC for each gender
icc_thr(logistic_MLM2, 'PID')
MOR(logistic_MLM2, 'PID') # 2.246703
# Compute averaged ICC
icc_thr(logistic_MLM2, 'PID') # 0.1795847
icc_sim(logistic_MLM2, 'PID',seed=2023) # 0.1311799
icc_lin(logistic_MLM2, 'PID') # 0.1489162
MOR(logistic_MLM2, 'PID') # 2.246703
# Make Figure 3B
barplot(icc_sim(logistic_MLM2, 'PID', avg_preds = F, seed=2023))
# Make Figure 3B
barplot(icc_lin(logistic_MLM2, 'PID', avg_preds = F),
)
# Make Figure 3B
barplot(icc_lin(logistic_MLM2, 'PID', avg_preds = F),
ylim=c(0.10,0.12), xpd=F,
names.arg = c('Control', 'Stress'))
# Make Figure 3B
barplot(icc_lin(logistic_MLM2, 'PID', avg_preds = F),
ylim=c(0.10,0.14), xpd=F,
names.arg = c('Control', 'Stress'))
# Fit model with effects-coded gender
logistic_MLM3 <- glmer(effort_choice ~ Gender_c + (1|PID),
data=data.Ctl, family='binomial')
# Make Figure 3B
barplot(icc_lin(logistic_MLM2, 'PID', avg_preds = F),
ylim=c(0.10,0.14), xpd=F,
names.arg = c('Control', 'Stress'),
ylab='ICC (Linearization Method)',
xlab='Experimental Condition')
abline(h=icc_lin(logistic_MLM2, 'PID'), lty=2, col='red')
plot(1:75, iccs_across_trials,
pch=21, cex=2,
col='black', bg='lightblue',
xlab="Trial Number",
ylab='ICC (Linearization Method)')
abline(h=icc_lin(logistic_MLM1, 'PID'), lty=2, col='red')
icc_lin(logistic_MLM2, 'PID') # 0.1221064
icc_lin(logistic_MLM0, 'PID')
icc_lin(logistic_MLM1, 'PID')
icc_lin(logistic_MLM0, 'PID')
icc_lin(logistic_MLM1, 'PID')
# Compute trial per block to use as a predictor
data.Ctl <- data.Ctl[order(c(data.Ctl$PID, data.Ctl$block)), ]
data.Ctl <- data.Ctl[!is.na(data.Ctl$PID),]
trial <- c()
for(i in unique(data.Ctl$PID)) {
for(j in unique(data.Ctl$block)) {
trial <- c(trial, 1:nrow(data.Ctl[data.Ctl$PID==i & data.Ctl$block==j, ]))
}
}
data.Ctl$trial <- trial
# Model effort choice trial-by-trial
data.Ctl$trial_c <- data.Ctl$trial - median(data.Ctl$trial)
data.Ctl$trial0  <- data.Ctl$trial_c/max(data.Ctl$trial_c)
logistic_MLM1 <- glmer(effort_choice ~ trial0 + (1|PID),
data=data.Ctl, family='binomial')
summary(logistic_MLM1)
icc_thr(logistic_MLM0, 'PID')
icc_thr(logistic_MLM1, 'PID')
icc_sim(logistic_MLM0, 'PID')
icc_sim(logistic_MLM1, 'PID')
icc_lin(logistic_MLM0, 'PID')
icc_lin(logistic_MLM1, 'PID')
icc_lin(logistic_MLM1, 'PID')
icc_sim(logistic_MLM1, 'PID')
icc_sim(logistic_MLM0, 'PID')
icc_sim(logistic_MLM1, 'PID')
# dummy code condition
data$condition <- as.factor(data$condition)
contrasts(data$condition) <- contr.sum(2)
# Fit model
logistic_MLM2 <- glmer(effort_choice ~ condition + (1|PID),
data=data, family='binomial')
summary(logistic_MLM2)
# Fit model
logistic_MLM2 <- glmer(effort_choice ~ condition + (1|PID),
data=data, family='binomial')
summary(logistic_MLM2)
summary(logistic_MLM2)
icc_lin(logistic_MLM2, 'PID') # 0.1221064
#' Example code for Quantifying Within- and Between-Cluster Variance in Logistic Multilevel Models
#' @author:  Sean Devine
#' @contact: seandamiandevine@gmail.com
#' @github:  https://github.com/seandamiandevine/logisticicc
#' @paper:   TODO
# Load data ---------------------------------------------------------------
# 1. For simplicity, recode effort choices so that 1 = high effort and 0 = low effort
# 2. subset the data such that we only look at participants in the control condition
data               <- read.csv('Bogdanovetal2021/DST_data_osf2.csv')
data$effort_choice <- abs(data$effort_choice-1)
data.Ctl           <- data[data$condition=='control', ] # focus just on control condition for now
# Logistic multilevel model for choice -------------------------------------------------------------------
# load the lme4 package (assuming the package is installed)
# if the lme4 is not installed, run this command first:
# install.packages('lme4')
library(lme4)
# Fit an intercept only model of choice
logistic_MLM0 <- glmer(effort_choice ~ 1 + (1|PID), data=data.Ctl, family='binomial')
# print summary statistics of this model
summary(logistic_MLM0)
# convert the intercept effect from log odds to probability scale and print
pChooseHighEffort <- exp(fixef(logistic_MLM0))/(1+exp(fixef(logistic_MLM0)))
cat('estimated group average probability of choosing the high-effort cue = ', pChooseHighEffort, '\n')
# # Reproduce Figure 2 from paper -----------------------------------------
# extract random intercepts from model and add them to the fixed effect (gamma00)
eb <- coef(logistic_MLM0)$PID
head(eb)
# plot how individual differences in EB manifest in the behavioural data
# get P(High effort) from each participant
phigheff = tapply(data.Ctl$effort_choice, data.Ctl$PID, mean)
# plot correlation between EB
plot(eb$`(Intercept)`, phigheff,
ylim=c(0,1), xlim=c(-3,3),
pch=21, cex=2,
col='black', bg='lightblue',
xlab=expression(gamma[`00`] + U[`0j`]),
ylab='P(Choose High Effort)')
abline(h=.5, lty=2)
# extract the estimated random intercept variance (tau^2_0)
tau <- VarCorr(logistic_MLM0)$PID[1]
# plot the histogram of the random intercepts and overlay an estimated normal density curve with
# mu = gamma00 and sd = sqrt(tau^2_0)
hist(eb[[1]], main='', xlab=expression(gamma[`00`] + U[`0j`]), freq = F, xlim=c(-3,3), ylim=c(0,1))
curve(dnorm(x, fixef(logistic_MLM0), sqrt(tau)), add=T, lwd=2)
# finally, shade in areas of demand-avoidance (b0 < 0) and demand-seeking respectively (b0 > 0)
abline(v=0, lty='dashed', lwd=3)
rect(0, 0, 10, 100, col = scales::alpha('red', .1))
rect(0, 0, -10, 100, col = scales::alpha('blue', .1))
text(-.75, .95, labels = 'Demand\navoidant')
text(.75, .95, labels = 'Demand\nseeking')
# ICC: Latent variable approach -------------------------------------------
tau20     <- VarCorr(logistic_MLM0)$PID[1]
sigma2    <- pi^2/3
threshICC <- tau20/(tau20+sigma2)
# print result
cat('ICC using the Latent Threshold Approach = ',threshICC,'\n')
# ICC: Simulation method ---------------------------------------------------------------------
# 0. Extract intercept-variance and fixed effects, specify number of simulations, and set random seed
set.seed(2022) # for reproducibility
tau20       <- VarCorr(logistic_MLM0)$PID[1]
gamma00     <- fixef(logistic_MLM0)[[1]]
M           <- 1e5
# 1. Simulate random effects
# (note, we take the square root of tau20 here, because we want the standard dev., not the variance)
U0j         <- rnorm(M, 0, sqrt(tau20))
# 2. Predict probabilities
logit_p_hat <- gamma00+U0j
p_hat       <- exp(logit_p_hat)/(1+exp(logit_p_hat))
# 3. Compute level-1 variance (Bernouilli variance)
var_L1      <- p_hat*(1-p_hat)
# 4. Compute ICC
sigma2      <- mean(var_L1)
simICC      <- var(p_hat)/(var(p_hat) + sigma2)
# print result
cat('ICC using the Simulation Model = ',simICC,'\n')
# ICC: Linearization -----------------------------------------------------------
# 0. Extract relevant parameters (tau0 and gamma00)
tau20   <- VarCorr(logistic_MLM0)$PID[1]
gamma00 <- fixef(logistic_MLM0)[[1]]
# 1. Evaluate the probability of success at the mean of random effects (i.e., the fixed effect)
p       <- exp(gamma00)/(1+exp(gamma00))
# 2. Compute the Bernouilli variance of this fixed estimate first
var1    <- p*(1-p)
# 3. Compute the variance in the level-1 outcome
var2    <- tau20*p^2*(1 + exp(gamma00))^(-2)
# 4. Compute ICC
linICC  <- var2/(var1+var2)
# print result
cat('ICC using the Linearization method = ',linICC,'\n')
# Median Odds Ratio ----------------------------------------------------------------
tau20 <- VarCorr(logistic_MLM0)$PID[1]
phi75 <- qnorm(.75) # 75th percentile of normal CDF
MOR   <- exp(sqrt(2*tau20)*phi75)
cat('Median Odds Ratio = ',MOR,'\n')
# Compute trial per block to use as a predictor
data.Ctl <- data.Ctl[order(c(data.Ctl$PID, data.Ctl$block)), ]
data.Ctl <- data.Ctl[!is.na(data.Ctl$PID),]
trial <- c()
for(i in unique(data.Ctl$PID)) {
for(j in unique(data.Ctl$block)) {
trial <- c(trial, 1:nrow(data.Ctl[data.Ctl$PID==i & data.Ctl$block==j, ]))
}
}
data.Ctl$trial <- trial
# Model effort choice trial-by-trial
data.Ctl$trial_c <- data.Ctl$trial - median(data.Ctl$trial)
data.Ctl$trial0  <- data.Ctl$trial_c/max(data.Ctl$trial_c)
logistic_MLM1 <- glmer(effort_choice ~ trial0 + (1|PID),
data=data.Ctl, family='binomial')
summary(logistic_MLM1)
icc_thr(logistic_MLM0, 'PID')
source('fx.R') # import custom functions
# Compute trial per block to use as a predictor
data.Ctl <- data.Ctl[order(c(data.Ctl$PID, data.Ctl$block)), ]
data.Ctl <- data.Ctl[!is.na(data.Ctl$PID),]
trial <- c()
for(i in unique(data.Ctl$PID)) {
for(j in unique(data.Ctl$block)) {
trial <- c(trial, 1:nrow(data.Ctl[data.Ctl$PID==i & data.Ctl$block==j, ]))
}
}
data.Ctl$trial <- trial
# Model effort choice trial-by-trial
data.Ctl$trial_c <- data.Ctl$trial - median(data.Ctl$trial)
data.Ctl$trial0  <- data.Ctl$trial_c/max(data.Ctl$trial_c)
logistic_MLM1 <- glmer(effort_choice ~ trial0 + (1|PID),
data=data.Ctl, family='binomial')
summary(logistic_MLM1)
icc_thr(logistic_MLM0, 'PID')
icc_thr(logistic_MLM1, 'PID')
icc_sim(logistic_MLM0, 'PID')
icc_sim(logistic_MLM1, 'PID')
icc_lin(logistic_MLM0, 'PID')
icc_lin(logistic_MLM1, 'PID')
MOR(logistic_MLM0, 'PID')
MOR(logistic_MLM1, 'PID')
# Make figure 3A
# compute the ICC at each different steps along `trial` to see how it shifts
# we will visualize this with the linearization
iccs_across_trials <- icc_lin(logistic_MLM1, 'PID', avg_preds = F)
plot(1:75, iccs_across_trials,
pch=21, cex=2,
col='black', bg='lightblue',
xlab="Trial Number",
ylab='ICC (Linearization Method)')
abline(h=icc_lin(logistic_MLM1, 'PID'), lty=2, col='red')
# Make figure 3A
# compute the ICC at each different steps along `trial` to see how it shifts
# we will visualize this with the linearization
iccs_across_trials <- icc_thr(logistic_MLM1, 'PID', avg_preds = F)
# Make figure 3A
# compute the ICC at each different steps along `trial` to see how it shifts
# we will visualize this with the linearization
iccs_across_trials <- icc_thr(logistic_MLM1, 'PID')
plot(1:75, iccs_across_trials,
pch=21, cex=2,
col='black', bg='lightblue',
xlab="Trial Number",
ylab='ICC (Linearization Method)')
icc_thr(logistic_MLM1, 'PID', )
icc_thr(logistic_MLM1, 'PID')
# Make figure 3A
# compute the ICC at each different steps along `trial` to see how it shifts
# we will visualize this with the linearization
iccs_across_trials <- icc_lin(logistic_MLM1, 'PID', avg_preds = F)
View(icc_lin)
plot(1:75, iccs_across_trials,
pch=21, cex=2,
col='black', bg='lightblue',
xlab="Trial Number",
ylab='ICC (Linearization Method)')
abline(h=icc_lin(logistic_MLM1, 'PID'), lty=2, col='red')
VarCorr(fit)[[gr]][1]
fit = logistic_MLM1
VarCorr(fit)[[gr]][1]
lme4::VarCorr(fit)[[gr]][1
]
gr='PID'
lme4::VarCorr(fit)[[gr]][1]
tau2 <- lme4::VarCorr(fit)[[gr]][1]
y_lgt_pred <- predict(fit, re.form = NA)
y_lgt_pred
# otherwise, compute a unique ICC for each unique value in `y_lgt_pred`
y_lgt_pred_un <- unique(y_lgt_pred)
y_lgt_pred_un
sapply(y_lgt_pred_un, function(y_pred) {
mn_y_lgt_pred <- y_pred
mu_p <- integrate(function (x) {
plogis(x) * dnorm(x, mn_y_lgt_pred, sqrt(tau2))
}, -Inf, Inf)$value
tau2_p <- integrate(function (x) {
(plogis(x) - mu_p) ^ 2 * dnorm(x, mn_y_lgt_pred, sqrt(tau2))
}, -Inf, Inf)$value
tau2_p / (mu_p - mu_p ^ 2)
})
# Compute trial per block to use as a predictor
data.Ctl <- data.Ctl[order(c(data.Ctl$PID, data.Ctl$block)), ]
data.Ctl <- data.Ctl[!is.na(data.Ctl$PID),]
trial <- c()
for(i in unique(data.Ctl$PID)) {
for(j in unique(data.Ctl$block)) {
trial <- c(trial, 1:nrow(data.Ctl[data.Ctl$PID==i & data.Ctl$block==j, ]))
}
}
data.Ctl$trial <- trial
# Model effort choice trial-by-trial
data.Ctl$trial_c <- data.Ctl$trial - median(data.Ctl$trial)
data.Ctl$trial0  <- data.Ctl$trial_c/max(data.Ctl$trial_c)
logistic_MLM1 <- glmer(effort_choice ~ trial0 + (1|PID),
data=data.Ctl, family='binomial')
summary(logistic_MLM1)
icc_thr(logistic_MLM0, 'PID')
icc_thr(logistic_MLM1, 'PID')
icc_sim(logistic_MLM0, 'PID')
icc_sim(logistic_MLM1, 'PID')
icc_lin(logistic_MLM0, 'PID')
icc_lin(logistic_MLM1, 'PID')
MOR(logistic_MLM0, 'PID')
MOR(logistic_MLM1, 'PID')
# Make figure 3A
# compute the ICC at each different steps along `trial` to see how it shifts
# we will visualize this with the linearization
iccs_across_trials <- icc_lin(logistic_MLM1, 'PID', avg_preds = F)
plot(1:75, iccs_across_trials,
pch=21, cex=2,
col='black', bg='lightblue',
xlab="Trial Number",
ylab='ICC (Linearization Method)')
abline(h=icc_lin(logistic_MLM1, 'PID'), lty=2, col='red')
icc_lin(logistic_MLM1, 'PID', avg_preds = T)
# Make figure 3A
# compute the ICC at each different steps along `trial` to see how it shifts
# we will visualize this with the linearization
iccs_across_trials <- icc_lin(logistic_MLM1, 'PID', avg_preds = F)
mean(iccs_across_trials)
icc_lin(logistic_MLM1, 'PID', avg_preds = T)
# Make figure 3A
# compute the ICC at each different steps along `trial` to see how it shifts
# we will visualize this with the linearization
iccs_across_trials <- icc_lin(logistic_MLM1, 'PID', avg_preds = F)
icc_lin(logistic_MLM1, 'PID', avg_preds = T)
# dummy code condition
data$condition <- as.factor(data$condition)
contrasts(data$condition) <- contr.sum(2)
# Fit model
logistic_MLM2 <- glmer(effort_choice ~ condition + (1|PID),
data=data, family='binomial')
summary(logistic_MLM2)
# Compute ICC for each gender
icc_thr(logistic_MLM2, 'PID') # 0.1507089
icc_sim(logistic_MLM2, 'PID', avg_preds = F, seed=2023) # 0.1127125 0.1106655
icc_lin(logistic_MLM2, 'PID', avg_preds = F) # 0.1245555 0.1189923
MOR(logistic_MLM2, 'PID') # 2.072635
# Compute averaged ICC
icc_thr(logistic_MLM2, 'PID') # 0.1507089
icc_sim(logistic_MLM2, 'PID',seed=2023) # 0.1115791
icc_lin(logistic_MLM2, 'PID') # 0.1221064
MOR(logistic_MLM2, 'PID') # 2.072635
icc_lin(logistic_MLM2, 'PID') # 0.1221064
# Compute ICC for each gender
icc_thr(logistic_MLM2, 'PID') # 0.1507089
# Compute averaged ICC
icc_thr(logistic_MLM2, 'PID') # 0.1507089
icc_sim(logistic_MLM2, 'PID', avg_preds = F, seed=2023) # 0.1127125 0.1106655
icc_lin(logistic_MLM2, 'PID', avg_preds = F) # 0.1245555 0.1189923
MOR(logistic_MLM2, 'PID') # 2.072635
MOR(logistic_MLM2, 'PID') # 2.072635
icc_lin(logistic_MLM2, 'PID') # 0.1221064
#' Example code for Quantifying Within- and Between-Cluster Variance in Logistic Multilevel Models
#' @author:  Sean Devine
#' @contact: seandamiandevine@gmail.com
#' @github:  https://github.com/seandamiandevine/logisticicc
#' @paper:   TODO
# Load data ---------------------------------------------------------------
# 1. For simplicity, recode effort choices so that 1 = high effort and 0 = low effort
# 2. subset the data such that we only look at participants in the control condition
data               <- read.csv('Bogdanovetal2021/DST_data_osf2.csv')
data$effort_choice <- abs(data$effort_choice-1)
data.Ctl           <- data[data$condition=='control', ] # focus just on control condition for now
# Logistic multilevel model for choice -------------------------------------------------------------------
# load the lme4 package (assuming the package is installed)
# if the lme4 is not installed, run this command first:
# install.packages('lme4')
library(lme4)
# Fit an intercept only model of choice
logistic_MLM0 <- glmer(effort_choice ~ 1 + (1|PID), data=data.Ctl, family='binomial')
# print summary statistics of this model
summary(logistic_MLM0)
# convert the intercept effect from log odds to probability scale and print
pChooseHighEffort <- exp(fixef(logistic_MLM0))/(1+exp(fixef(logistic_MLM0)))
cat('estimated group average probability of choosing the high-effort cue = ', pChooseHighEffort, '\n')
# # Reproduce Figure 2 from paper -----------------------------------------
# extract random intercepts from model and add them to the fixed effect (gamma00)
eb <- coef(logistic_MLM0)$PID
head(eb)
# plot how individual differences in EB manifest in the behavioural data
# get P(High effort) from each participant
phigheff = tapply(data.Ctl$effort_choice, data.Ctl$PID, mean)
# plot correlation between EB
plot(eb$`(Intercept)`, phigheff,
ylim=c(0,1), xlim=c(-3,3),
pch=21, cex=2,
col='black', bg='lightblue',
xlab=expression(gamma[`00`] + U[`0j`]),
ylab='P(Choose High Effort)')
abline(h=.5, lty=2)
# extract the estimated random intercept variance (tau^2_0)
tau <- VarCorr(logistic_MLM0)$PID[1]
# plot the histogram of the random intercepts and overlay an estimated normal density curve with
# mu = gamma00 and sd = sqrt(tau^2_0)
hist(eb[[1]], main='', xlab=expression(gamma[`00`] + U[`0j`]), freq = F, xlim=c(-3,3), ylim=c(0,1))
curve(dnorm(x, fixef(logistic_MLM0), sqrt(tau)), add=T, lwd=2)
# finally, shade in areas of demand-avoidance (b0 < 0) and demand-seeking respectively (b0 > 0)
abline(v=0, lty='dashed', lwd=3)
rect(0, 0, 10, 100, col = scales::alpha('red', .1))
rect(0, 0, -10, 100, col = scales::alpha('blue', .1))
text(-.75, .95, labels = 'Demand\navoidant')
text(.75, .95, labels = 'Demand\nseeking')
# ICC: Latent variable approach -------------------------------------------
tau20     <- VarCorr(logistic_MLM0)$PID[1]
sigma2    <- pi^2/3
threshICC <- tau20/(tau20+sigma2)
# print result
cat('ICC using the Latent Threshold Approach = ',threshICC,'\n')
set.seed(2022) # for reproducibility
tau20       <- VarCorr(logistic_MLM0)$PID[1]
gamma00     <- fixef(logistic_MLM0)[[1]]
M           <- 1e5
# 1. Simulate random effects
# (note, we take the square root of tau20 here, because we want the standard dev., not the variance)
U0j         <- rnorm(M, 0, sqrt(tau20))
# 2. Predict probabilities
logit_p_hat <- gamma00+U0j
p_hat       <- exp(logit_p_hat)/(1+exp(logit_p_hat))
p_hat
# 3. Compute level-1 variance (Bernouilli variance)
var_L1      <- p_hat*(1-p_hat)
var_L1
p_hat
var(p_hat)
var(p_hat)
v = c(0,0)
exp(v)
exp(v)[1]/exp(v)
exp(v)[1]/sum(exp(v))
# 0. Extract relevant parameters (tau0 and gamma00)
tau20   <- VarCorr(logistic_MLM0)$PID[1]
gamma00 <- fixef(logistic_MLM0)[[1]]
# 1. Evaluate the probability of success at the mean of random effects (i.e., the fixed effect)
p       <- exp(gamma00)/(1+exp(gamma00))
# 2. Compute the Bernouilli variance of this fixed estimate first
var1    <- p*(1-p)
# 3. Compute the variance in the level-1 outcome
var2    <- tau20*p^2*(1 + exp(gamma00))^(-2)
var1
# 1. Evaluate the probability of success at the mean of random effects (i.e., the fixed effect)
p       <- exp(gamma00)/(1+exp(gamma00))
