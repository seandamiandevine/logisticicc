library(lme4); library(lmerTest)
files = paste0('data/', list.files('data/'))
files
files = paste0('data/', list.files('data/', pattern = '.csv'))
files
main_files  = paste0('data/', list.files('data/', pattern = '.csv'))
calib_files = paste0('data/calibration/', list.files('data/calibration', pattern = '.csv'))
calib_files
main_files  = paste0('data/', list.files('data/', pattern = '.csv'))
calib_files = paste0('data/calibration/', list.files('data/calibration', pattern = '.csv'))
dat   = do.call(plyr::rbind.fill, lapply(main_files, read.csv))
calib =  do.call(plyr::rbind.fill, lapply(calib_files, read.csv))
library(lme4); library(lmerTest)
se = function(x) sd(x,na.rm=T)/sqrt(length(x))
main_files  = paste0('data/', list.files('data/', pattern = '.csv'))
calib_files = paste0('data/calibration/', list.files('data/calibration', pattern = '.csv'))
dat   = do.call(plyr::rbind.fill, lapply(main_files, read.csv))
calib =  do.call(plyr::rbind.fill, lapply(calib_files, read.csv))
calib
calib_files[grepl('rating', calib_files)]
calib = do.call(plyr::rbind.fill, lapply(calib_files[grepl('rating', calib_files)], read.csv))
rating = do.call(plyr::rbind.fill, lapply(calib_files[grepl('rating', calib_files)], read.csv))
ratings = do.call(plyr::rbind.fill, lapply(calib_files[grepl('rating', calib_files)], read.csv))
rm(list=ls())
library(lme4); library(lmerTest)
se = function(x) sd(x,na.rm=T)/sqrt(length(x))
# Load data ---------------------------------------------------------------
main_files  = paste0('data/', list.files('data/', pattern = '.csv'))
calib_files = paste0('data/calibration/', list.files('data/calibration', pattern = '.csv'))
dat   = do.call(plyr::rbind.fill, lapply(main_files, read.csv))
# Visualize ratings/calibration ---------------------------------------------------
ratings = do.call(plyr::rbind.fill, lapply(calib_files[grepl('rating', calib_files)], read.csv))
View(ratings)
tapply(ratings$V, ratings$PID, min)
minV = tapply(ratings$V, ratings$PID, min)
maxV = tapply(ratings$V, ratings$PID, max)
hist(maxV)
hist(maxV, xlab='90% of Tolerance (in V)', main='High Shock Level')
ratings = do.call(plyr::rbind.fill, lapply(calib_files[grepl('rating', calib_files)], read.csv))
minV = tapply(ratings$V, ratings$PID, min)
maxV = tapply(ratings$V, ratings$PID, max)
pdf('figs/minmax_V.pdf', 6, 6)
layout(matrix(1:2,1,2))
hist(minV, xlab='10% of Tolerance (in V)', main='High Shock Level')
hist(maxV, xlab='90% of Tolerance (in V)', main='High Shock Level')
dev.off()
ratings = do.call(plyr::rbind.fill, lapply(calib_files[grepl('rating', calib_files)], read.csv))
minV = tapply(ratings$V, ratings$PID, min)
maxV = tapply(ratings$V, ratings$PID, max)
pdf('figs/minmax_V.pdf', 8, 4)
layout(matrix(1:2,1,2))
hist(minV, xlab='10% of Tolerance (in V)', main='High Shock Level')
hist(maxV, xlab='90% of Tolerance (in V)', main='High Shock Level')
dev.off()
ratings
tapply(ratings$rating, list(ratings$PID, ratings$V), mean)
na.rm(tapply(ratings$rating, list(ratings$PID, ratings$V), mean))
na.omit(tapply(ratings$rating, list(ratings$PID, ratings$V), mean))
mrate = mrate[mrate!=NA]
mrate = tapply(ratings$rating, list(ratings$PID, ratings$V), mean)
mrate = mrate[mrate!=NA]
mrate
mrate = tapply(ratings$rating, list(ratings$PID, ratings$V), mean)
is.na(mrate)
mrate = mrate[is.na(mrate)]
mrate
mrate = tapply(ratings$rating, list(ratings$PID, ratings$V), mean)
mrate = mrate[!is.na(mrate)]
mrate
mrate = tapply(ratings$rating, list(ratings$PID, ratings$V), mean)
mrate = mrate[!is.na(mrate),,drop=F]
mrate = tapply(ratings$rating, list(ratings$PID, ratings$V), mean)
mrate = mrate[!is.na(mrate),drop=F]
mrate
barplot(mrate)
mrate
mrate = tapply(ratings$rating, list(ratings$PID, ratings$V), mean)
barplot(mrate)
mrate
ratings
ratings$shock_lev = ifelse(ratings$V < .05, 'Low','High')
mrate  = tapply(ratings$rating, ratings$shock_lev, mean)
serate = tapply(ratings$rating, ratings$shock_lev, se)
barplot(mrate)
barplot(rev(mrate))
b = barplot(rev(mrate), xlab='Relative Shock Intensity', ylab='Pain Rating', main='Rating Phase')
arrows(b, mrate-serate, b, mrate+serate, length=0)
mrate  = rev(tapply(ratings$rating, ratings$shock_lev, mean))
serate = rev(tapply(ratings$rating, ratings$shock_lev, se))
b = barplot(mrate, xlab='Relative Shock Intensity', ylab='Pain Rating', main='Rating Phase')
arrows(b, mrate-serate, b, mrate+serate, length=0)
rm(list=ls())
library(lme4); library(lmerTest)
se = function(x) sd(x,na.rm=T)/sqrt(length(x))
# Load data ---------------------------------------------------------------
main_files  = paste0('data/', list.files('data/', pattern = '.csv'))
calib_files = paste0('data/calibration/', list.files('data/calibration', pattern = '.csv'))
dat   = do.call(plyr::rbind.fill, lapply(main_files, read.csv))
# Visualize ratings/calibration ---------------------------------------------------
ratings = do.call(plyr::rbind.fill, lapply(calib_files[grepl('rating', calib_files)], read.csv))
## Min/Max V -----
minV = tapply(ratings$V, ratings$PID, min)
maxV = tapply(ratings$V, ratings$PID, max)
pdf('figs/minmax_V.pdf', 8, 4)
layout(matrix(1:2,1,2))
hist(minV, xlab='10% of Tolerance (in V)', main='Low Shock Level')
hist(maxV, xlab='90% of Tolerance (in V)', main='High Shock Level')
dev.off()
## Ratings of Min/Max V ----
ratings$shock_lev = ifelse(ratings$V < .05, 'Low','High')
mrate  = rev(tapply(ratings$rating, ratings$shock_lev, mean))
serate = rev(tapply(ratings$rating, ratings$shock_lev, se))
ylimit = range(pretty(c(mrate-serate, mrate+serate)))
b = barplot(mrate, xlab='Relative Shock Intensity', ylab='Pain Rating',
main='Rating Phase', ylim=ylimit)
arrows(b, mrate-serate, b, mrate+serate, length=0)
dat
names(dat)
dat = dat[dat$block!='practice', ]
dat
pcor = tapply(dat$acc, dat$id, mean, na.rm=T)
hist(pcor)
pcor
hist(pcor, main='Overall Accuracy', xlab='P(Correct)')
## Overall RT ----
mrt = tapply(dat$rt, dat$id, mean, na.rm=T)
## Overall RT ----
mrt = tapply(dat$rt, dat$id, mean, na.rm=T)
hist(pcor, main='Overall RT', xlab='RT (s.)')
## Overall RT ----
mrt = tapply(dat$rt, dat$id, mean, na.rm=T)
hist(mrt, main='Overall RT', xlab='RT (s.)')
dat$timeout = as.numeric(is.na(dat$rt))
dat$timeout
mrt = tapply(dat$timeout, dat$id, mean, na.rm=T)
hist(mrt, main='Overall RT', xlab='RT (s.)')
dev.off()
mrt = tapply(dat$timeout, dat$id, mean, na.rm=T)
hist(mrt, main='Overall RT', xlab='RT (s.)')
dat$age
desc = list(
N = length(unique(dat$id)),
mage = mean(dat$age),
sage = sd(dat$age)
)
desc
unique(dat$sex)
ifelse(grepl('f', dat$age, 1,0)
)
ifelse(grepl('f', dat$age), 1,0)
desc = list(
N = length(unique(dat$id)),
mage = mean(dat$age),
sage = sd(dat$age),
pfem = mean(ifelse(grepl('f', dat$age), 1,0))
)
desc
grepl('f', lower(dat$age)), 1,0)
mean(ifelse(grepl('f', lower(dat$age)), 1,0))
mean(ifelse(grepl('f', lower(dat$age)), 1,0)
desc = list(
desc = list(
N = length(unique(dat$id)),
mage = mean(dat$age),
sage = sd(dat$age),
pfem = mean(ifelse(grepl('f', tolower(dat$sex)), 1,0))
)
desc
desc = list(
N = length(unique(dat$id)),
mage = mean(dat$age),
sage = sd(dat$age),
pfem = mean(ifelse(grepl('f', tolower(dat$sex[dat$trial==1])), 1,0))
)
pfem
desc
rm(list=ls())
setwd('~')
f = function(x,p) p^x*(1-p)^(1-x)
n = 100
X = sample(c(0,1), size=n, replace = T)
X
mean(X)
f = function(x,p) p^x*(1-p)^(1-x)
set.seed(2022)
n = 100
X = sample(c(0,1), size=n, replace = T)
f(X,.5)
f(X,.6)
prod(f(X,.6))
sum(log(f(X,.6)))
sum(log(f(X,.5)))
obj = sum(log(f(X,.5)))
obj = function(p) sum(log(f(X,p)))
grid = seq(0,1,by=.001)
ll   = obj(grid)
ll   = sapply(grid, function(i) sum(log(f(X,i))))
ll
plot(grid, ll)
grid = seq(0,1,by=.001)
ll   = sapply(grid, function(i) -sum(log(f(X,i))))
plot(grid, ll)
plot(grid, ll, type='l')
grid[which.min(ll)]
f = function(x,p) p^x*(1-p)^(1-x)
set.seed(2022)
n = 100
P  = .44
X = sample(c(0,1), size=n, replace = T, prob = c(1-P, P))
obj = function(p)
grid = seq(0,1,by=.001)
ll   = sapply(grid, function(i) -sum(log(f(X,i))))
plot(grid, ll, type='l')
grid[which.min(ll)]
f = function(x,p) p^x*(1-p)^(1-x)
set.seed(2022)
n = 100
P  = .12
X = sample(c(0,1), size=n, replace = T, prob = c(1-P, P))
obj = function(p)
grid = seq(0,1,by=.001)
ll   = sapply(grid, function(i) -sum(log(f(X,i))))
plot(grid, ll, type='l')
grid[which.min(ll)]
f = function(x,p) p^x*(1-p)^(1-x)
set.seed(2022)
n = 100
P  = .12
X = sample(c(0,1), size=n, replace = T, prob = c(1-P, P))
obj = function(p)
grid = seq(0,1,by=.001)
ll   = sapply(grid, function(i) -sum(log(f(X,i))))
plot(grid, ll, type='l')
grid[which.min(ll)]
f = function(x,p) p^x*(1-p)^(1-x)
set.seed(2022)
n = 100
P  = .12
X = sample(c(0,1), size=n, replace = T, prob = c(1-P, P))
obj = function(p)
grid = seq(0,1,by=.001)
ll   = sapply(grid, function(i) -sum(log(f(X,i))))
plot(grid, ll, type='l')
grid[which.min(ll)]
f = function(x,p) p^x*(1-p)^(1-x)
set.seed(2022)
n = 100
P  = .1
X = sample(c(0,1), size=n, replace = T, prob = c(1-P, P))
obj = function(p)
grid = seq(0,1,by=.001)
ll   = sapply(grid, function(i) -sum(log(f(X,i))))
plot(grid, ll, type='l')
grid[which.min(ll)]
f = function(x,p) p^x*(1-p)^(1-x)
set.seed(2022)
n = 100
P  = .88
X = sample(c(0,1), size=n, replace = T, prob = c(1-P, P))
obj = function(p)
grid = seq(0,1,by=.001)
ll   = sapply(grid, function(i) -sum(log(f(X,i))))
plot(grid, ll, type='l')
grid[which.min(ll)]
f = function(x,p) p^x*(1-p)^(1-x)
set.seed(2022)
n = 100
P  = .88
X = sample(c(0,1), size=n, replace = T, prob = c(1-P, P))
obj = function(p)
grid = seq(0,1,by=.001)
ll   = sapply(grid, function(i) -sum(log(f(X,i))))
plot(grid, ll, type='l')
grid[which.min(ll)]
f = function(x,p) p^x*(1-p)^(1-x)
set.seed(2022)
n = 1000
P  = .88
X = sample(c(0,1), size=n, replace = T, prob = c(1-P, P))
obj = function(p)
grid = seq(0,1,by=.001)
ll   = sapply(grid, function(i) -sum(log(f(X,i))))
plot(grid, ll, type='l')
grid[which.min(ll)]
f = function(x,p) p^x*(1-p)^(1-x)
set.seed(2022)
n = 1000
P  = .02
X = sample(c(0,1), size=n, replace = T, prob = c(1-P, P))
obj = function(p)
grid = seq(0,1,by=.001)
ll   = sapply(grid, function(i) -sum(log(f(X,i))))
plot(grid, ll, type='l')
grid[which.min(ll)]
f = function(x,p) p^x*(1-p)^(1-x)
set.seed(2022)
n = 1000
P  = .02
X = sample(c(0,1), size=n, replace = T, prob = c(1-P, P))
obj = function(p)
grid = seq(0,1,by=.001)
ll   = sapply(grid, function(i) -sum(log(f(X,i))))
plot(grid, ll, type='l', xlab='p', ylab='-Log likelihood')
grid[which.min(ll)]
mean(X)
deriv(expression(f))
D(f)
parse(text=f)
parse(text=as.character(f))
fe = expression(p^x*(1-p)^(1-x))
fe
deriv(fe)
deriv(fe,'p')
eval(deriv(fe,'p'))
df = deriv(fe,'p')
p  = .5
eval(df)
df[[1]]
df[[1]](p)
total   = 22000
prolcut = .3*total
total   = 22000
prolcut = .3*total
persub  = seq(30,50,by=5)
persub
(total-prolcut)/persub
names(x) = persub
x = (total-prolcut)/persub
names(x) = persub
x
t(x)
t(t(x))
total   = 22000
prolcut = .3*total
persub  = seq(30,50,by=5)
x = (total-prolcut)/persub
names(x) = persub
t(t(x))
total   = 22000
prolcut = .3*total
persub  = seq(30,60,by=5)
x = (total-prolcut)/persub
names(x) = persub
t(t(x))
total   = 22000
prolcut = .3*total
persub  = seq(30,60,by=5)
n = round((total-prolcut)/persub)
names(n) = persub
t(t(n))
barplot(n)
barplot(n, xlab='Payment per subject ($)', ylab='Estimated Sample Size')
total   = 22000
prolcut = .3*total
persub  = seq(30,60,by=5)
n = round((total-prolcut)/persub)
names(n) = persub
t(t(n))
barplot(n, xlab='Payment per subject (USD)', ylab='Estimated Sample Size')
total   = 22000
prolcut = .3*total
persub  = seq(20,60,by=5)
n = round((total-prolcut)/persub)
names(n) = persub
t(t(n))
barplot(n, xlab='Payment per subject (USD)', ylab='Estimated Sample Size')
CAN_to_USD = .73
total   = 22000 * CAN_to_USD
prolcut = .3*total
persub  = seq(20,60,by=5)
n = round((total-prolcut)/persub)
names(n) = persub
t(t(n))
barplot(n, xlab='Payment per subject (USD)', ylab='Estimated Sample Size')
CAN_to_USD = .73
total   = 12000 * CAN_to_USD
prolcut = .3*total
persub  = seq(20,60,by=5)
n = round((total-prolcut)/persub)
names(n) = persub
t(t(n))
barplot(n, xlab='Payment per subject (USD)', ylab='Estimated Sample Size')
CAN_to_USD = .73
total   = 10000 * CAN_to_USD
prolcut = .3*total
persub  = seq(20,60,by=5)
n = round((total-prolcut)/persub)
names(n) = persub
t(t(n))
barplot(n, xlab='Payment per subject (USD)', ylab='Estimated Sample Size')
CAN_to_USD = .73
total   = 12000 * CAN_to_USD
prolcut = .3*total
persub  = seq(20,60,by=5)
n = round((total-prolcut)/persub)
names(n) = persub
t(t(n))
barplot(n, xlab='Payment per subject (USD)', ylab='Estimated Sample Size')
setwd("~/Documents/logisticicc/github")
install.packages("MuMIn")
install.packages("MuMIn")
install.packages("MuMIn")
version
